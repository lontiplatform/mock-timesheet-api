{
    "authTypes": [
        "BASIC"
    ],
    "groups": [
        "ESBAPIAdminGroup"
    ],
    "info": {
        "title": "Mock Timesheet API",
        "description": "This is a sample timesheet api. This can be used for mocking or testing APIs.\n\n### Sending Authenticated Requests\n\nYou can use your ECC account to send authenticated request to the API. Your ECC credentials must be sent in the `Authorization` header in the HTTP request\n\n#### To authenticate a request with basic authentication\n\n1. Combine your email and password with a colon (`:`). e.g. `jdoe@mailinator.com:pa$$w0rd`\n2. Encode the resulting string in Base64\n3. Include an Authorization header in the HTTP request containing the base64-encoded string. Example: ```\nAuthorization: Basic amRvZUBtYWlsaW5hdG9yLmNvbTpwYSQkdzByZA==```",
        "license": {
            "name": "MIT"
        },
        "version": "1.0.0"
    },
    "basePath": "/mock-timesheet-api",
    "paths": {
        "/users": {
            "description": "Users endpoint for viewing creating users and viewing users list.",
            "get": {
                "tags": [
                    "Users"
                ],
                "summary": "Retrieves all users.",
                "description": "Fetches all the user in the api.",
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "body": "response",
                        "description": "If the request is successful",
                        "responseBodyMockData": {
                            "mockDataType": "JSON",
                            "mockData": "{\n    \"result\": \"SUCCESS\",\n    \"message\": \"Users fecthed successfully.\",\n    \"users\": [\n        {\n            \"name\": \"Romeo Wavish\",\n            \"id\": \"6003165b-a3c5-426b-a659-ce1595bffec9\"\n        },\n        {\n            \"name\": \"Slade Klampk\",\n            \"id\": \"7d9fcc44-530d-4307-a6b2-e6202d582bdb\"\n        },\n        {\n            \"name\": \"Celestyn Eadmead\",\n            \"id\": \"8acd811b-9b1c-42fc-83cf-ab5a8265d38c\"\n        }\n    ]\n}"
                        }
                    },
                    "500": {
                        "body": "APIException",
                        "description": "If the server encountered an exception while processing the request.",
                        "responseBodyMockData": {
                            "mockDataType": "JSON",
                            "mockData": "{\n    \"result\": \"ERROR\",\n    \"httpErrorCode\": 500,\n    \"message\": \"Encountered an exception while processing the request\"\n}"
                        }
                    }
                },
                "operationType": "gloop",
                "operationLocation": "io.toro.mock.timesheet.api.controller.user.ListUsers",
                "responseCodeField": "responseCode"
            },
            "post": {
                "tags": [
                    "Users"
                ],
                "summary": "Creates a single user.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "bodyParameter": {
                    "name": "user",
                    "description": "The user data."
                },
                "responses": {
                    "201": {
                        "body": "response",
                        "description": "If the user was created successfully.",
                        "responseBodyMockData": {
                            "mockDataType": "JSON",
                            "mockData": "{\n    \"result\": \"SUCCESS\",\n    \"message\": \"Successfully created user with id: 957af7e2-e4ae-417c-92ff-80f9fc100b3c\",\n    \"user\": {\n        \"name\": \"John Doe\",\n        \"id\": \"957af7e2-e4ae-417c-92ff-80f9fc100b3c\"\n    }\n}"
                        }
                    },
                    "500": {
                        "body": "APIException",
                        "description": "If the server encountered an exception while processing the request.",
                        "responseBodyMockData": {
                            "mockDataType": "JSON",
                            "mockData": "{\n    \"result\": \"ERROR\",\n    \"httpErrorCode\": 500,\n    \"message\": \"Encountered an exception while processing the request.\"\n}"
                        }
                    }
                },
                "operationType": "gloop",
                "operationLocation": "io.toro.mock.timesheet.api.controller.user.CreateUser",
                "responseCodeField": "responseCode"
            }
        },
        "/users/{userId}": {
            "description": "User endpoint for viewing, updating, and deleting a specific user.",
            "get": {
                "tags": [
                    "Users"
                ],
                "summary": "Fetches a single user.",
                "description": "Retrieves a single user record",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "userId",
                        "type": "PATH",
                        "description": "The ID of the user to fetch."
                    }
                ],
                "responses": {
                    "200": {
                        "body": "response",
                        "description": "If the request is successful.",
                        "responseBodyMockData": {
                            "mockDataType": "JSON",
                            "mockData": "{\n    \"user\": {\n        \"name\": \"Romeo Wavish\",\n        \"id\": \"6003165b-a3c5-426b-a659-ce1595bffec9\"\n    }\n}"
                        }
                    },
                    "404": {
                        "body": "APIException",
                        "description": "Returns the error response.",
                        "responseBodyMockData": {
                            "mockDataType": "JSON",
                            "mockData": "{\n    \"result\": \"ERROR\",\n    \"httpErrorCode\": 404,\n    \"message\": \"User not found\"\n}"
                        }
                    },
                    "500": {
                        "body": "APIException",
                        "description": "If the server encounters an exception while processing the request.",
                        "responseBodyMockData": {
                            "mockDataType": "JSON",
                            "mockData": "{\n    \"result\": \"ERROR\",\n    \"httpErrorCode\": 500,\n    \"message\": \"Encountered an error while processing the request.\"\n}"
                        }
                    }
                },
                "operationType": "gloop",
                "operationLocation": "io.toro.mock.timesheet.api.controller.user.GetUser",
                "responseCodeField": "responseCode"
            },
            "put": {
                "tags": [
                    "Users"
                ],
                "summary": "Updates a single user.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "userId",
                        "type": "PATH",
                        "description": "The ID of the user to update."
                    }
                ],
                "bodyParameter": {
                    "name": "user",
                    "description": "The new user data to replace the current one."
                },
                "responses": {
                    "200": {
                        "body": "response",
                        "description": "If the update is successful",
                        "responseBodyMockData": {
                            "mockDataType": "JSON",
                            "mockData": "{\n    \"result\": \"SUCCESS\",\n    \"message\": \"Successfully updated user with id: 6003165b-a3c5-426b-a659-ce1595bffec9\",\n    \"user\": {\n        \"name\": \"Romeo Wavish\",\n        \"id\": \"6003165b-a3c5-426b-a659-ce1595bffec9\"\n    }\n}"
                        }
                    },
                    "404": {
                        "body": "APIException",
                        "description": "If the user does not exist",
                        "responseBodyMockData": {
                            "mockDataType": "JSON",
                            "mockData": "{\n    \"result\": \"ERROR\",\n    \"httpErrorCode\": 404,\n    \"message\": \"User not found\"\n}"
                        }
                    },
                    "500": {
                        "body": "APIException",
                        "description": "If the server encountered an error while processing the request",
                        "responseBodyMockData": {
                            "mockDataType": "JSON",
                            "mockData": "{\n    \"result\": \"ERROR\",\n    \"httpErrorCode\": 500,\n    \"message\": \"Encountered an exception while processing the request\"\n}"
                        }
                    }
                },
                "operationType": "gloop",
                "operationLocation": "io.toro.mock.timesheet.api.controller.user.UpdateUser",
                "responseCodeField": "responseCode"
            },
            "delete": {
                "tags": [
                    "Users"
                ],
                "summary": "Deletes a single user.",
                "description": "Removes a user record in the api.",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "userId",
                        "type": "PATH",
                        "description": "The ID of the user to delete."
                    }
                ],
                "responses": {
                    "200": {
                        "body": "response",
                        "description": "If the delete request is successful.",
                        "responseBodyMockData": {
                            "mockDataType": "JSON",
                            "mockData": "{\n    \"result\": \"SUCCESS\",\n    \"message\": \"Successfully deleted user with id: c6f8174a-23f6-44ff-8480-976876986061\"\n}"
                        }
                    },
                    "404": {
                        "body": "APIException",
                        "description": "If the user does not exist or not found.",
                        "responseBodyMockData": {
                            "mockDataType": "JSON",
                            "mockData": "{\n    \"result\": \"ERROR\",\n    \"httpErrorCode\": 404,\n    \"message\": \"User not found.\"\n}"
                        }
                    },
                    "500": {
                        "body": "APIException",
                        "description": "If the server encountered an exception while processing the request.",
                        "responseBodyMockData": {
                            "mockDataType": "JSON",
                            "mockData": "{\n    \"result\": \"ERROR\",\n    \"httpErrorCode\": 500,\n    \"message\": \"Encountered an exception while processing the request.\"\n}"
                        }
                    }
                },
                "operationType": "gloop",
                "operationLocation": "io.toro.mock.timesheet.api.controller.user.DeleteUser",
                "responseCodeField": "responseCode"
            }
        },
        "/users/{userId}/attendance": {
            "description": "User endpoint for creating and viewing a specific user's attendance records.",
            "get": {
                "tags": [
                    "Attendance"
                ],
                "summary": "Fetches the user's attendance.",
                "description": "Retrieves all attendance record for the given user id.",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "userId",
                        "type": "PATH",
                        "description": "The ID of the user who owns attendance to fetch."
                    },
                    {
                        "name": "startDate",
                        "type": "QUERY",
                        "description": "Fetch attendance starting from this date."
                    },
                    {
                        "name": "endDate",
                        "type": "QUERY",
                        "description": "Fetch attandance until this date."
                    }
                ],
                "responses": {
                    "200": {
                        "body": "response",
                        "description": "Returns the list of user attendance.",
                        "responseBodyMockData": {
                            "mockDataType": "JSON",
                            "mockData": "{\n    \"result\": \"SUCCESS\",\n    \"message\": \"Successfully fetched attendance for period Wed May 02 00:00:00 PST 2018 - Wed Mar 11 00:00:00 PST 2020\",\n    \"attendance\": [\n        {\n            \"type\": \"TIME OUT\",\n            \"timestamp\": \"2019-10-02T19:45:36+0800\",\n            \"id\": \"2db87c3f-f512-45c5-919e-53212ff82549\",\n            \"userId\": \"6003165b-a3c5-426b-a659-ce1595bffec9\"\n        },\n        {\n            \"type\": \"TIME OUT\",\n            \"timestamp\": \"2019-10-03T17:01:03+0800\",\n            \"id\": \"62fc08db-695f-4534-979e-4dcd8dc8b4b7\",\n            \"userId\": \"6003165b-a3c5-426b-a659-ce1595bffec9\"\n        },\n        {\n            \"type\": \"TIME IN\",\n            \"timestamp\": \"2019-10-02T06:38:12+0800\",\n            \"id\": \"79ac68bd-f55f-45ac-8ea1-d4398189ff36\",\n            \"userId\": \"6003165b-a3c5-426b-a659-ce1595bffec9\"\n        },\n        {\n            \"type\": \"TIME IN\",\n            \"timestamp\": \"2019-10-03T07:51:57+0800\",\n            \"id\": \"7e2a31ae-39ac-49ee-8266-778764db18de\",\n            \"userId\": \"6003165b-a3c5-426b-a659-ce1595bffec9\"\n        },\n        {\n            \"type\": \"TIME OUT\",\n            \"timestamp\": \"2019-10-01T17:07:46+0800\",\n            \"id\": \"c6f8174a-23f6-44ff-8480-976876986061\",\n            \"userId\": \"6003165b-a3c5-426b-a659-ce1595bffec9\"\n        },\n        {\n            \"type\": \"TIME IN\",\n            \"timestamp\": \"2019-10-01T07:55:17+0800\",\n            \"id\": \"e8c92818-a3a5-41ad-80bd-c350c1111966\",\n            \"userId\": \"6003165b-a3c5-426b-a659-ce1595bffec9\"\n        }\n    ]\n}"
                        }
                    },
                    "500": {
                        "body": "APIException",
                        "description": "If the server encounterd an error exception while processing the request.",
                        "responseBodyMockData": {
                            "mockDataType": "JSON",
                            "mockData": "{\n    \"result\": \"ERROR\",\n    \"httpErrorCode\": 500,\n    \"message\": \"Encountered an exception while processing the request\"\n}"
                        }
                    }
                },
                "operationType": "gloop",
                "operationLocation": "io.toro.mock.timesheet.api.controller.attendance.ListUserAttendanceInPeriod",
                "responseCodeField": "responseCode"
            },
            "post": {
                "tags": [
                    "Attendance"
                ],
                "summary": "Create a record of the user's attendance.",
                "description": "Adds a new attendance record for the given user id.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "userId",
                        "type": "PATH",
                        "description": "The user ID whose attendance will be recorded."
                    }
                ],
                "bodyParameter": {
                    "name": "attendance",
                    "description": "The attendance data to create."
                },
                "responses": {
                    "200": {
                        "body": "response",
                        "description": "Returns the status of the user attendance creation.",
                        "responseBodyMockData": {
                            "mockDataType": "JSON",
                            "mockData": "{\n    \"result\": \"SUCCESS\",\n    \"message\": \"Successfully recorded 'TIME OUT' attendance 'caedbe7e-d8a6-4105-9cf1-2af9a79b8bfc' of user '6003165b-a3c5-426b-a659-ce1595bffec9' on 'Wed Oct 02 07:45:17 PST 2019'\",\n    \"attendance\": {\n        \"type\": \"TIME OUT\",\n        \"timestamp\": \"2019-10-02T19:45:36+0800\",\n        \"id\": \"2db87c3f-f512-45c5-919e-53212ff82549\",\n        \"userId\": \"6003165b-a3c5-426b-a659-ce1595bffec9\"\n    }\n}"
                        }
                    },
                    "400": {
                        "body": "APIException",
                        "description": "If the attendance failed to be created",
                        "responseBodyMockData": {
                            "mockDataType": "JSON",
                            "mockData": "{\n    \"result\": \"ERROR\",\n    \"httpErrorCode\": 400,\n    \"message\": \"Encountered an error while processing the request. See logs for more info.\"\n}"
                        }
                    },
                    "404": {
                        "body": "APIException",
                        "description": "If the user in which the attendance will be added is not found or does not exist.",
                        "responseBodyMockData": {
                            "mockDataType": "JSON",
                            "mockData": "{\n    \"result\": \"ERROR\",\n    \"httpErrorCode\": 404,\n    \"message\": \"Encountered an exception while processing the request.\"\n}"
                        }
                    },
                    "500": {
                        "body": "APIException",
                        "description": "If the server encountered an exception while processing the request.",
                        "responseBodyMockData": {
                            "mockDataType": "JSON",
                            "mockData": "{\n    \"result\": \"ERROR\",\n    \"httpErrorCode\": 500,\n    \"message\": \"Encountered an exception while processing the request.\"\n}"
                        }
                    }
                },
                "operationType": "gloop",
                "operationLocation": "io.toro.mock.timesheet.api.controller.attendance.CreateAttendance",
                "responseCodeField": "responseCode"
            }
        },
        "/attendance": {
            "description": "Attendance endpoint for viewing a list of attendance records.",
            "get": {
                "tags": [
                    "Attendance"
                ],
                "summary": "Fetches a list of attendance records.",
                "description": "Lists all attendance for all users.",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "startDate",
                        "type": "QUERY",
                        "description": "Fetch attendance records starting from this date."
                    },
                    {
                        "name": "endDate",
                        "type": "QUERY",
                        "description": "Fetch attendance records until this date."
                    }
                ],
                "responses": {
                    "200": {
                        "body": "response",
                        "description": "Returns the list of attendance.",
                        "responseBodyMockData": {
                            "mockDataType": "JSON",
                            "mockData": "{\n    \"response\": {\n        \"result\": \"SUCCESS\",\n        \"message\": \"Fetched all attendance for given period.\",\n        \"attendance\": [\n            {\n                \"type\": \"TIME IN\",\n                \"timestamp\": \"2019-10-03T01:11:25+0000\",\n                \"id\": \"034dfe94-acdd-4ad9-9544-50451d5129d6\",\n                \"userId\": \"8acd811b-9b1c-42fc-83cf-ab5a8265d38c\"\n            },\n            {\n                \"type\": \"TIME IN\",\n                \"timestamp\": \"2019-10-02T23:56:44+0000\",\n                \"id\": \"1b4764ea-89b5-44d4-b73c-5bddd5217c23\",\n                \"userId\": \"7d9fcc44-530d-4307-a6b2-e6202d582bdb\"\n            },\n            {\n                \"type\": \"TIME IN\",\n                \"timestamp\": \"2019-10-01T23:51:27+0000\",\n                \"id\": \"d23d393e-ac4a-42a2-8e35-af9ff2a341e0\",\n                \"userId\": \"8acd811b-9b1c-42fc-83cf-ab5a8265d38c\"\n            },\n            {\n                \"type\": \"TIME IN\",\n                \"timestamp\": \"2019-09-30T23:55:17+0000\",\n                \"id\": \"e8c92818-a3a5-41ad-80bd-c350c1111966\",\n                \"userId\": \"6003165b-a3c5-426b-a659-ce1595bffec9\"\n            }\n        ]\n    }\n}"
                        }
                    },
                    "500": {
                        "body": "APIException",
                        "description": "Returns the error response.",
                        "responseBodyMockData": {
                            "mockDataType": "JSON",
                            "mockData": "{\n    \"result\": \"ERROR\",\n    \"httpErrorCode\": 500,\n    \"message\": \"Encountered an exception while processing the request.\"\n}"
                        }
                    }
                },
                "operationType": "gloop",
                "operationLocation": "io.toro.mock.timesheet.api.controller.attendance.ListAttendanceInPeriod",
                "responseCodeField": "responseCode"
            }
        },
        "/attendance/{id}": {
            "description": "Attendance endpoint for viewing, updating, and deleting a specific attendance record.",
            "get": {
                "tags": [
                    "Attendance"
                ],
                "summary": "Fetches a single attendance record.",
                "description": "Retrieves a single attendance record in the api.",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "type": "PATH",
                        "description": "The ID of the attendance record to fetch."
                    }
                ],
                "responses": {
                    "200": {
                        "body": "response",
                        "description": "If the request is successful.",
                        "responseBodyMockData": {
                            "mockDataType": "JSON",
                            "mockData": "{\n    \"result\": \"SUCCESS\",\n    \"message\": \"Attendance fetched sucessfully.\",\n    \"attendance\": {\n        \"type\": \"TIME OUT\",\n        \"timestamp\": \"2019-10-02T19:45:36+0800\",\n        \"id\": \"2db87c3f-f512-45c5-919e-53212ff82549\",\n        \"userId\": \"6003165b-a3c5-426b-a659-ce1595bffec9\"\n    }\n}"
                        }
                    },
                    "500": {
                        "body": "APIException",
                        "description": "If the server encountered an exception while processing the request.",
                        "responseBodyMockData": {
                            "mockDataType": "JSON",
                            "mockData": "{\n    \"result\": \"ERROR\",\n    \"httpErrorCode\": 500,\n    \"message\": \"Encountered an exception while processing the request.\"\n}"
                        }
                    },
                    "404": {
                        "body": "APIException",
                        "description": "If the attendance does not exist or not found.",
                        "responseBodyMockData": {
                            "mockDataType": "JSON",
                            "mockData": "{\n    \"result\": \"ERROR\",\n    \"httpErrorCode\": 404,\n    \"message\": \"Attendance record not found.\"\n}"
                        }
                    }
                },
                "operationType": "gloop",
                "operationLocation": "io.toro.mock.timesheet.api.controller.attendance.GetAttendance",
                "responseCodeField": "responseCode"
            },
            "put": {
                "tags": [
                    "Attendance"
                ],
                "summary": "Updates a single attendance record.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "type": "PATH",
                        "description": "The ID of the attendance record to update."
                    }
                ],
                "bodyParameter": {
                    "name": "attendance",
                    "description": "The new data of the attendance record to replace the current one."
                },
                "responses": {
                    "200": {
                        "body": "response",
                        "description": "If the request is successful",
                        "responseBodyMockData": {
                            "mockDataType": "JSON",
                            "mockData": "{\n    \"result\": \"SUCCESS\",\n    \"message\": \"Attendance successfully updated.\",\n    \"attendance\": {\n        \"type\": \"TIME IN\",\n        \"timestamp\": \"2019-10-01T17:07:46+0800\",\n        \"id\": \"c6f8174a-23f6-44ff-8480-976876986061\",\n        \"userId\": \"6003165b-a3c5-426b-a659-ce1595bffec9\"\n    }\n}"
                        }
                    },
                    "404": {
                        "body": "APIException",
                        "description": "If the attendance to be updated could not be found.",
                        "responseBodyMockData": {
                            "mockDataType": "JSON",
                            "mockData": "{\n    \"result\": \"ERROR\",\n    \"httpErrorCode\": 404,\n    \"message\": \"Attendance with id 8acd811b-9b1c-42fc-83cf-ab5a8265d38c not found.\"\n}"
                        }
                    },
                    "500": {
                        "body": "APIException",
                        "description": "If the server encountered an exception while processing the request.",
                        "responseBodyMockData": {
                            "mockDataType": "JSON",
                            "mockData": "{\n    \"result\": \"ERROR\",\n    \"httpErrorCode\": 500,\n    \"message\": \"Encountered an exception while processing the request.\"\n}"
                        }
                    }
                },
                "operationType": "gloop",
                "operationLocation": "io.toro.mock.timesheet.api.controller.attendance.UpdateAttendance",
                "responseCodeField": "responseCode"
            },
            "delete": {
                "tags": [
                    "Attendance"
                ],
                "summary": "Deletes a single attendance record.",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "type": "PATH",
                        "description": "The ID of the attendance record to delete."
                    }
                ],
                "responses": {
                    "200": {
                        "body": "response",
                        "description": "Returns the status of the attendance deletion.",
                        "responseBodyMockData": {
                            "mockDataType": "JSON",
                            "mockData": "{\n    \"result\": \"SUCCESS\",\n    \"message\": \"Successfully deleted attendance with id: c6f8174a-23f6-44ff-8480-976876986061\"\n}"
                        }
                    },
                    "404": {
                        "body": "APIException",
                        "description": "If the attendance to be deleted does not exist.",
                        "responseBodyMockData": {
                            "mockDataType": "JSON",
                            "mockData": "{\n    \"result\": \"ERROR\",\n    \"httpErrorCode\": 404,\n    \"message\": \"Attendance with id 6003165b-a3c5-426b-a659-ce1595bffec9 not found.\"\n}"
                        }
                    },
                    "500": {
                        "body": "APIException",
                        "description": "If the server encountered an exception while processing the request.",
                        "responseBodyMockData": {
                            "mockDataType": "JSON",
                            "mockData": "{\n    \"result\": \"ERROR\",\n    \"httpErrorCode\": 500,\n    \"message\": \"Encountered an exception while processing the request.\"\n}"
                        }
                    }
                },
                "operationType": "gloop",
                "operationLocation": "io.toro.mock.timesheet.api.controller.attendance.DeleteAttendance",
                "responseCodeField": "responseCode"
            }
        }
    },
    "tags": [
        {
            "name": "Users",
            "description": "Operations related to fetching, creating, updating, and deleting users",
            "externalDocumentation": {
                "url": "http://example.com"
            }
        },
        {
            "name": "Attendance",
            "description": "Operations related to viewing, adding, and modifying attendance",
            "externalDocumentation": {
                "url": "https://example.com"
            }
        }
    ],
    "externalDocumentation": {
        "url": "http://example.com",
        "description": "This is a non-production Timesheet REST API server, it aims to be used for mocking or testing APIs. \n\n### Sending Authenticated Requests\n\nYou can use your ECC account to send authenticated request to the API. Your ECC credentials must be sent in the `Authorization` header in the HTTP request\n\n#### To authenticate a request with basic authentication\n\n1. Combine your email and password with a colon (`:`). e.g. `jdoe@mailinator.com:pa$$w0rd`\n2. Encode the resulting string in Base64\n3. Include an Authorization header in the HTTP request containing the base64-encoded string. Example: ```\nAuthorization: Basic amRvZUBtYWlsaW5hdG9yLmNvbTpwYSQkdzByZA==```"
    }
}